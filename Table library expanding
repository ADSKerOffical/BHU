setreadonly(table, false)

getgenv().table.meta = {}

getgenv().table.thaw = newcclosure(function(tabl)
  makewriteable(tabl)
end)

getgenv().table.length = newcclosure(function(tabl)
  local num = 0
   for _, _ in next, tabl do
     num += 1
   end
  return num
end)

getgenv().table.isarray = newcclosure(function(tabl)
  if #tabl == table.length(tabl) then
   return true
  end
 return false
end)

getgenv().table.isdictonary = newcclosure(function(tabl)
  return table.length(tabl) >= 1 and #tabl == 0
end)

getgenv().table.ishybrid = newcclosure(function(tabl)
  if not table.isdictonary(tabl) and #tabl ~= table.length(tabl) then
 return true
  end
 return false
end)

getgenv().table.toarray = newcclosure(function(tabl)
 if typeof(tabl) == "table" and isarray(tabl) then
   return tabl
 end
 
  local array = {}
   for index, value in ipairs(tabl) do
     table.insert(array, rawget(tabl, index))
   end
  return array
end)

getgenv().table.find_fisrtindex_containing = newcclosure(function(tabl, term)
  for index, value in next, tabl do
    if type(index) == "string" then
      if string.find(index, term, 1, true) then
return rawget(tabl, index)
      end
    end
  end
 return nil
end)

getgenv().table.isempty = newcclosure(function(tabl)
  return table.length(tabl) == 0
end)

getgenv().table.merger = newcclosure(function(...)
  local result = {}
    for _, tabl in next, ({...}) do
      if typeof(tabl) == "table" then
        for index, value in next, tabl do
          table.insert(result, rawget(tabl, index))
        end
      end
    end
  return result
end)

getgenv().table.getinfo = newcclosure(function(tabl)
  local infofake = {}
    
   infofake.type = ""
    if table.isarray(tabl) then infofake.type = "Array"
    elseif table.isdictonary(tabl) then infofake.type = "Dictionary"
    elseif table.ishybrid(tabl) then infofake.type = "Hybrid" end
   infofake.len = table.length(tabl)
   infofake.hasmetatable = (getrawmetatable(tabl) ~= nil)
   
  local numnkeys = 0
    for index, _ in next, tabl do
      if typeof(index) == "number" then
        numnkeys += 1
      end
    end
    
   local nested = 0
    for _, value in next, tabl do
      if typeof(value) == "table" then
         nested += 1
      end
    end
    
    if table.find(_G, tabl) ~= nil or table.find(getgenv(), tabl) ~= nil or table.find(getreg(), tabl) ~= nil or tabl == _G or tabl == getgenv() or tabl == getreg() then
      infofake.isglobal = true
     else
      infofake.isglobal = false
    end
    
    infofake.num_numeric_indexes = numnkeys
    infofake.readonly = table.isfrozen(tabl)
    infofake.numprotos = nested
    
  return infofake
end)

getgenv().table.deepfind = newcclosure(function(tabl: table, value: string)
  for i, v in next, tabl do
    if v == value then
      return v
    end
    if typeof(v) == "table" and v ~= value then
     local result = deepfind(v, value)
       if result then return result end
    end
  end
end)

getgenv().table.findkey = newcclosure(function(tabl: table, key: string)
  for i, v in next, tabl do
    if i == key then
      return v
    end
  end
end)

getgenv().table.getprotos = newcclosure(function(tabl)
  local res = {}
    for _, proto in next, tabl do
      if typeof(proto) == "table" then
        table.insert(res, table.clone(proto))
      end
    end
  return res
end)

getgenv().table.meta.get = getrawmetatable 
getgenv().table.meta.set = setrawmetatable

getgenv().table.meta.has = newcclosure(function(tabl: table): bool
  return (typeof(tabl) == "table" or typeof(tabl) == "Instance") and getrawmetatable(tabl) ~= nil
end)

getgenv().table.meta.isprotected = newcclosure(function(tabl: table): bool
  if getmetatable(tabl) ~= nil and typeof(getmetatable(tabl)) ~= "table" then
    return true
  end
  return false
end)

setreadonly(table, true)
