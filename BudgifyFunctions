getgenv().todata = newcclosure(function(str)
  return loadstring(tostring(str))()
end)

getgenv().clonefunc = newcclosure(function(func)
    return debug.getinfo(func).func or debug.info(func, "f")
end)

getgenv().isvararg = newcclosure(function(func)
  return debug.getinfo(func).is_vararg == 1
end)

getgenv().comparefunctions = newcclosure(function(func1, func2)
  return debug.getinfo(func1).func == debug.getinfo(func2).func
end)

getgenv().gettablesarray = newcclosure(function(...)
    local result = {} 
    for _, tbl in ipairs({...}) do
        if type(tbl) == "table" then
            for _, value in ipairs(tbl) do
                table.insert(result, value)
            end
        end
    end
    return result
end)

getgenv().isadonis = newcclosure(function()
  for i, v in next, getgc(true) do
     if typeof(v) == "table" and rawget(v, "Detected") and typeof(rawget(v, "Detected")) == "function" then
return true
    end
  end
  return false
end)

getgenv().hasmetatable = newcclosure(function(tabl)
 return getrawmetatable(tabl) ~= nil
end)

getgenv().getthreadname = newcclosure(function()
  if getthreadidentity() == 0 then
return "Unknown"
  elseif getthreadidentity() == 1 then
return "RobloxStudio"
  elseif getthreadidentity() == 2 then
return "BaseScript"
  elseif getthreadidentity() == 3 then
return "GameScript"
  elseif getthreadidentity() == 4 then
return "RobloxScript"
  elseif getthreadidentity() == 5 then
return "Command"
  elseif getthreadidentity() == 6 then
return "Plugin"
  elseif getthreadidentity() == 7 then
return "WebService"
  elseif getthreadidentity() == 8 then
return "Replication"
  end
end)

getgenv().gettabledates = newcclosure(function(tabl, data)
  local tah = {}
   if tabl == nil then
     error("The table is nil", 0)
   end
   if type(data) ~= "string" then
     error("Unsupported format or non-existent date type", 0)
   end
   
   if type(tabl) == "table" and #tabl >= 1 then
      for x, v in next, tabl do
        if type(rawget(tabl, x)) == data then
  table.insert(tah, rawget(tabl, x))
        end
      end
    end
    return tah
end)

getgenv().getmoreinfo = newcclosure(function(data)
  if type(data) == "userdata" then
    if data == game then
return {
  getmetatable = getrawmetatable(game),
  getservices = game:GetChildren(),
  getthumbnail = "https://www.roblox.com/asset-thumbnail/image?assetId=" .. game.PlaceId .. "&width=432&height=432&format=png"
}
    elseif data:IsA("Player") or data.Parent == game.Players then
return {
  hasmodel = {[1] = (data.Character ~= nil), [2] = data.Character or data.CharacterAdded:Wait()},
  getrootpart = data.Character.HumanoidRootPart or data.Character.HumanoidRootPart,
  isdied = data.Character.Humanoid:GetState() == "Dead",
  friendscount = tonumber(string.gsub(game:HttpGet("https://friends.roblox.com/v1/users/" .. data.UserId .. "/friends/count"), "%D", "")),
  yourfriend = game.Players.LocalPlayer:IsFriendsWith(data.UserId),
  lphwid = gethwid(),
  lpplatform = gethiddenproperty(game.Players.LocalPlayer, "PlatformName"),
  verified = data.HasVerifiedBadge,
  rigtype = data.Character.Humanoid.RigType,
  getaccessories = data.Character.Humanoid:GetAccessories()
}
    elseif data:IsA("BasePart") then
return {
  hastouch = data:FindFirstChild("TouchInterest"),
  getparts = workspace:GetPartsInPart(data),
  getfloorpart = workspace:FindPartOnRay(Ray.new(data.Position, Vector3.new(0, -(data.Size.Y - 4.5), 0)), IgnoreDescendantsObject),
  isowned = isnetworkowner(data),
  sleeping = gethiddenproperty(data, "NetworkIsSleeping"),
  parentisplayer = {[1] = game.Players:GetPlayerFromCharacter(data) ~= nil, [2] = game.Players:GetPlayerFromCharacter(data)},
  descendantoflp = data:IsDescendantOf(game.Players.LocalPlayer.Character),
  isnil = function()
    for _, v in next, getnilinstances() do
      if v.Name == data.Name and v.ClassName == data.ClassName then
  return {[1] = true, [2] = data}
      end
    end
    return false
  end,
  fantom = (data.CanCollide == false and data.CanTouch == false)
}
   elseif data:IsA("Model") then
return {
  isplayer = game.Players:GetPlayerFromCharacter(data) ~= nil,
  gethumanoid = data:FindFirstChildOfClass("Humanoid"),
  networkowned = data.Humanoid.RootPart or data.HumanoidRooPart and isnetworkowner(data.HumanoidRootPart)
}
  end
    elseif type(data) == "number" then
return {
  iseven = (data % 2 == 0),
  isinteger = (data == math.floor(data)), 
  isnegative = (data < 0)
}
    elseif type(data) == "function" then
return {
   closure = debug.getinfo(data).what,
   iscloned = function()
   for _, funct in next, getfenv() do
      if debug.getinfo(data).name == debug.getinfo(funct).name or debug.getinfo(data).func == debug.getinfo(funct).func then
return true
     end
   end
 return false
 end,
   ingenv = (_G[data] ~= nil or getgenv()[data] ~= nil),
   isyield = coroutine.isyieldable(),
   anonymous = debug.getinfo(data).name == nil
}
    elseif type(data) == "string" then
return {
   symbols = #data,
   unsupportedchars = function()
  local uns = 0
  for i = 0, #data do 
    if string.byte(string.sub(data, i, i)) == 225 or string.byte(string.sub(data, i, i)) == 0 then
   uns += 1 
    end 
   end
  return uns
  end,
   reverse = string.reverse(data),
   fromascii = function() return data end,
   toascii = function()
    local asciiString = ""
    for i = 1, #data do
        asciiString = asciiString .. "\\" .. tostring(string.byte(data, i))
    end
    return asciiString
  end
}
   elseif type(data) == "table" then
return {
  readonly = table.isfrozen(data),
  hasmetatable = function()
    if isreadonly(data) == false then
    return getrawmetatable(data) ~= nil
     else
     return "unknown"
    end
  end
 }
  end
end)

getgenv().httpget = newcclosure(function(link)
  return request({Url = link, Method = "GET",}).Body
end)

getgenv().isprivateserver = newcclosure(function()
  for _, server in next, gettablesarray(game:GetService("HttpService"):JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Desc&limit=100")).data, game:GetService("HttpService"):JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100")).data) do
   if server.id == game.JobId then
return false
  end
 end
   return true
end)

getgenv().getplaceinfo = newcclosure(function()
  return {
     universeid = tonumber(string.gsub(httpget("https://apis.roblox.com/universes/v1/places/" .. game.PlaceId .. "/universe"), "%D", "")),
     creatorinfo = game:GetService("HttpService"):JSONDecode(game:HttpGetAsync("https://users.roproxy.com/v1/users/" .. tostring(game.CreatorId))),
     thumbnail = "https://www.roblox.com/asset-thumbnail/image?assetId=" .. game.PlaceId .. "&width=432&height=432&format=png",
     getservers = game:GetService("HttpService"):JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100")).data
  }
end)

getgenv().getproperties = newcclosure(function(instance)
local properties = {}
    for _, propertyName in ipairs(game:GetService("ReflectionService"):GetPropertyNames(instance.ClassName)) do
        if instance[propertyName] ~= nil then
            properties[propertyName] = instance[propertyName]
        end
    end
  return properties
end)

getgenv().isemptytable = newcclosure(function(tabl)
  local chekc = 0
    for i, v in next, tabl do
      chekc += 1
    end
   return chekc == 0
end)

getgenv().ishiddenproperty = newcclosure(function(var, prop)
  local yes, err = pcall(function()
    value = var[prop]
  end)
  
   if yes then
 return false
    else
 local yes2, err = pcall(function()
   gethiddenproperty(var, prop)
 end)
 
     if yes2 then
return true
      else
return nil
     end
   end
end)

getgenv().isrenderproperty = newcclosure(function(var, prop)
  if ishiddenproperty(var, prop) == nil then return nil end
  return not ishiddenproperty(var, prop)
end)
